{"version":3,"sources":["logo.svg","components/card/index.jsx","components/cardList/index.jsx","components/search/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","m","key","Search","type","placeholder","onChange","inputChange","App","e","setState","searchVal","target","value","console","log","state","fetch","then","resp","json","data","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,2LCG9BC,G,kBAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,WACLC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACP,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCJbC,G,MAAW,SAAAR,GAAK,OAC3B,yBAAKC,UAAU,aACZD,EAAMS,SAASC,KAAI,SAAAC,GAAC,OACnB,kBAAC,EAAD,CAAMC,IAAKD,EAAEN,GAAID,QAASO,UCJnBE,G,MAAS,SAAAb,GAAK,OACzB,2BACEc,KAAK,SACLC,YAAaf,EAAMe,YACnBC,SAAUhB,EAAMiB,YAChBhB,UAAU,aCiCCiB,E,YAlCb,aAAe,IAAD,8BACZ,+CAcFD,YAAc,SAAAE,GACZ,EAAKC,SAAS,CAAEC,UAAWF,EAAEG,OAAOC,QAAS,kBAAMC,QAAQC,IAAI,EAAKC,WAdpE,EAAKA,MAAQ,CACXjB,SAAU,GACVY,UAAW,IAJD,E,iFASO,IAAD,OAClBM,MAAM,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAI,OAAI,EAAKX,SAAS,CAAEX,SAAUsB,S,+BAOlC,IAAD,EACyBC,KAAKN,MAA7BjB,EADD,EACCA,SAAUY,EADX,EACWA,UACZY,EAAmBxB,EAASyB,QAAO,SAAAvB,GAAC,OACxCA,EAAEL,KAAK6B,cAAcC,SAASf,EAAUc,kBAE1C,OACE,yBAAKlC,UAAU,OACb,8CACA,kBAAC,EAAD,CAAQgB,YAAae,KAAKf,YAAaF,YAAY,oBACnD,kBAAC,EAAD,CAAUN,SAAUwB,S,GA7BVI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.0d3e80f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monsters\"\r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Card } from \"../card\";\r\nimport \"./styles.css\";\r\n\r\nexport const CardList = props => (\r\n  <div className=\"card-list\">\r\n    {props.monsters.map(m => (\r\n      <Card key={m.id} monster={m} />\r\n    ))}\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport const Search = props => (\r\n  <input\r\n    type=\"search\"\r\n    placeholder={props.placeholder}\r\n    onChange={props.inputChange}\r\n    className=\"search\"\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { CardList } from \"./components/cardList\";\nimport { Search } from \"./components/search\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchVal: \"\"\n    };\n    //this.inputChange = this.inputChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(resp => resp.json())\n      .then(data => this.setState({ monsters: data }));\n  }\n\n  inputChange = e => {\n    this.setState({ searchVal: e.target.value }, () => console.log(this.state));\n  };\n\n  render() {\n    const { monsters, searchVal } = this.state;\n    const filteredMonsters = monsters.filter(m =>\n      m.name.toLowerCase().includes(searchVal.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monster Search</h1>\n        <Search inputChange={this.inputChange} placeholder=\"Search Monsters\" />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}